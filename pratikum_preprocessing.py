# -*- coding: utf-8 -*-
"""Pratikum Preprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ssHY2G-2DY8fp-PHTqUBDAqB5hYQORI6

#  Pratikum Preprocessing: [Movie Dataset]
- **Nama:** [Kinanti Anggraeni]
- **NIM:** [4112322010]
- **Pertemuan:** [Minggu ke-3]

## Import library
"""

import numpy as np
import pandas as pd

"""## Memuat Data"""

!wget https://raw.githubusercontent.com/kinantianggraeni/Movie-dataset/refs/heads/main/movie_sample_dataset.csv

"""## Memeriksa Data"""

movie_df = pd.read_csv("movie_sample_dataset.csv")
movie_df.head()

movie_df.shape

movie_df = pd.read_csv("movie_sample_dataset.csv")
missing_values = movie_df[movie_df.isnull().any(axis=1)]
print(missing_values)

"""## Membersihkan Data"""

# cek banyaknya missing value pada masing-masing kolom
movie_df.replace([" ","Nan", "N/A", "n/a", "null", "NULL", "Null", "-"], np.nan, inplace=True)
print(movie_df.isnull().sum())

# 1. Hapus baris yang memiliki nilai NaN di kolom 'gross' dan 'budget'
movie_df.dropna(subset=['gross', 'budget'], axis=0, inplace=True)
movie_df.reset_index(drop=True, inplace=True)

# 2. Bagian yang tidak konsisten atau kesalahan penulisan di kolom, mengubah nilai di kolom 'color' menjadi huruf kecil
movie_df["color"]=movie_df["color"].str.lower().str.strip()
movie_df["country"]=movie_df["country"].str.upper()
movie_df["language"]=movie_df["language"].str.capitalize()

movie_df["country"]=movie_df["country"].replace({"UNITED STATES":"USA", "NEW ZEALAND":"NZ", "FRANCE":"FR", "AUSTRALIA":"AU", "CZECH REPUBLIC":"CZ"})

# 3. Ubah atau hapus nilai-nilai yang tidak standar, seperti nilai negatif atau 'N/A'
movie_df = movie_df[movie_df['gross'] >= 0]
movie_df = movie_df[movie_df['budget'] >= 0]
movie_df = movie_df[movie_df['duration'] >= 0]
movie_df = movie_df[movie_df['imdb_score'] >= 0]

# Menghapus nilai 'N/A'
movie_df.replace('N/A', pd.NA, inplace=True)  # Mengganti 'N/A' dengan NaN
movie_df.dropna(inplace=True)  # Hapus baris yang masih mengandung NaN

# menghapus duplikat
movie_df.drop_duplicates(inplace=True)

# memperbaiki outlier
movie_df=movie_df[(movie_df["duration"] >= 30) & (movie_df["duration"] < 300)]
movie_df=movie_df[(movie_df["imdb_score"] >= 0) & (movie_df["imdb_score"] <= 10)]
movie_df=movie_df[(movie_df["title_year"] >= 1999)]

# Menampilkan data yang sudah dibersihkan
print(movie_df)  # Menampilkan dataframe di konsol

movie_df.shape

# cek kembali missing value pada masing-masing kolom
print(movie_df.isnull().sum())

"""## Transformasi Data"""

# memeriksa tipe data tiap kolom
movie_df.dtypes

"""Variabel numerik harus memiliki tipe data ‘float’ atau ’int’ dan variabel text bertipe data ‘string’ atau ‘object’.

float: gross, budget, imdb_score
int: duration, title_year, movie_facebook_likes
object: color, director_name, genres, movie_title, language, country, actors

*   float: gross, budget, imdb_score (nilai bisa berupa angka desimal)
*   int: duration, title_year (berupa angka bulat)
*   object: color, director_name, genres, movie_title, language, country, actors (menyimpan informasi berbasis teks)





"""

# mengubah tipe data yang diperlukan
movie_df[["color", "language"]] = movie_df[["color", "language"]].astype("string")
movie_df[["gross", "budget"]] = movie_df[["gross", "budget"]].astype("int64")

# Menampilkan data setelah kolom diubah
movie_df.dtypes

# Normalisasi teks untuk memastikan konsistensi
movie_df['movie_title'] = movie_df['movie_title'].str.lower().str.strip()
movie_df['genres'] = movie_df['genres'].str.lower().str.strip()
print(movie_df)

"""## Penyimpanan Data"""

# Simpan dataframe yang sudah dibersihkan ke file CSV baru
output_file = 'movie_dataset_cleaned.csv'
movie_df.to_csv(output_file, index=False)